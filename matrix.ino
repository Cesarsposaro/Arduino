
#define R1 12
#define R2 A3
#define R3 11
#define R4 A1
#define R5 4
#define R6 10
#define R7 5
#define R8 8
#define C1 A2
#define C2 6
#define C3 7
#define C4 13
#define C5 9
#define C6 A0
#define C7 A4
#define C8 3

byte ALL[] = {B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111,B11111111};
byte EX[] = {B00000000,B00010000,B00010000,B00010000,B00010000,B00000000,B00010000,B00000000};
byte A[] = {  B00000000,B00111100,B01100110,B01100110,B01111110,B01100110,B01100110,B01100110};
byte B[] = {B01111000,B01001000,B01001000,B01110000,B01001000,B01000100,B01000100,B01111100};
byte C[] = {B00000000,B00011110,B00100000,B01000000,B01000000,B01000000,B00100000,B00011110};
byte D[] = {B00000000,B00111000,B00100100,B00100010,B00100010,B00100100,B00111000,B00000000};
byte E[] = {B00000000,B00111100,B00100000,B00111000,B00100000,B00100000,B00111100,B00000000};
byte F[] = {B00000000,B00111100,B00100000,B00111000,B00100000,B00100000,B00100000,B00000000};
byte G[] = {B00000000,B00111110,B00100000,B00100000,B00101110,B00100010,B00111110,B00000000};
byte H[] = {B00000000,B00100100,B00100100,B00111100,B00100100,B00100100,B00100100,B00000000};
byte I[] = {B00000000,B00111000,B00010000,B00010000,B00010000,B00010000,B00111000,B00000000};
byte J[] = {B00000000,B00011100,B00001000,B00001000,B00001000,B00101000,B00111000,B00000000};
byte K[] = {B00000000,B00100100,B00101000,B00110000,B00101000,B00100100,B00100100,B00000000};
byte L[] = {B00000000,B00100000,B00100000,B00100000,B00100000,B00100000,B00111100,B00000000};
byte M[] = {B00000000,B00000000,B01000100,B10101010,B10010010,B10000010,B10000010,B00000000};
byte N[] = {B00000000,B00100010,B00110010,B00101010,B00100110,B00100010,B00000000,B00000000};
byte O[] = {B00000000,B00111100,B01000010,B01000010,B01000010,B01000010,B00111100,B00000000};
byte P[] = {B00000000,B00111000,B00100100,B00100100,B00111000,B00100000,B00100000,B00000000};
byte Q[] = {B00000000,B00111100,B01000010,B01000010,B01000010,B01000110,B00111110,B00000001};
byte R[] = {B00000000,B00111000,B00100100,B00100100,B00111000,B00100100,B00100100,B00000000};
byte S[] = {B00000000,B00111100,B00100000,B00111100,B00000100,B00000100,B00111100,B00000000};
byte T[] = {B00000000,B01111100,B00010000,B00010000,B00010000,B00010000,B00010000,B00000000};
byte U[] = {B00000000,B01000010,B01000010,B01000010,B01000010,B01000010,B00111100,B00000000};
byte V[] = {B00000000,B00100010,B00100010,B00100010,B00010100,B00010100,B00001000,B00000000};
byte W[] = {B00000000,B10000010,B10010010,B01010100,B01010100,B00101000,B00000000,B00000000};
byte X[] = {B00000000,B01000010,B00100100,B00011000,B00011000,B00100100,B01000010,B00000000};
byte Y[] = {B00000000,B01000100,B00101000,B00010000,B00010000,B00010000,B00010000,B00000000};
byte Z[] = {B00000000,B00111100,B00000100,B00001000,B00010000,B00100000,B00111100,B00000000};
byte Smile[] = {B00000000,B01100110,B00000000,B00011000,B00000000,B01000010,B00111100,B00000000};

const byte row[] = {R1,R2,R3,R4,R5,R6,R7,R8};
const byte col[] = {C8,C7,C6,C5,C4,C3,C2,C1};
float c=0;

void setup() {
  for ( char i=3; i<=13;i++){
    pinMode(i,OUTPUT);
  }
  pinMode(A0,OUTPUT);
  pinMode(A1,OUTPUT);
  pinMode(A2,OUTPUT);
  pinMode(A3,OUTPUT);
  pinMode(A4,OUTPUT);;
  pinMode(A5,OUTPUT);
   for ( char j=0; j<8;j++){
   digitalWrite(col[j],HIGH);
   digitalWrite(row[j],LOW);
 }
}

void loop() {
while (c <=2000){
 matrixDraw(L);
}
while (c<=4000){
  matrixDraw(U);
}
while(c<=6000){
  matrixDraw(D);
}
while(c<=8000){
  matrixDraw(O);
}
while(c<=12000){
  matrixDraw(Smile);
}
c=0;
}


void matrixDraw(byte out[]) {
  c++;
  for(char t = 0; t < 8 ;t++){
  for (char k = 0 ; k < 8 ; k++){
  digitalWrite(col[k],HIGH);
  if ((out[t] >> k) & B00000001 ){
  digitalWrite(col[k],LOW);
 }
  }
 digitalWrite(row[t],HIGH);
 digitalWrite(row[t],LOW);
}
}
